# Generated by Django 3.0.3 on 2020-02-27 16:37

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('web_interface', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='awsaccesskey',
            name='access_key_id',
            field=models.CharField(help_text='The 20-character AWS access key ID', max_length=20, validators=[django.core.validators.RegexValidator(code='nomatch', message='Length has to be 20', regex='^.{20}$')], verbose_name='Access key ID'),
        ),
        migrations.AlterField(
            model_name='awsaccesskey',
            name='copy_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web_interface.AWSAccessKey', verbose_name='Is this key a shared version of an original key?'),
        ),
        migrations.AlterField(
            model_name='awsaccesskey',
            name='name',
            field=models.CharField(help_text='For your convenience, assign a unique name to this access key', max_length=100, verbose_name='Key name'),
        ),
        migrations.AlterField(
            model_name='awsaccesskey',
            name='secret_key',
            field=models.CharField(help_text='The 40-character secret access key associated with the access key ID', max_length=40, validators=[django.core.validators.RegexValidator(code='nomatch', message='Length has to be 40', regex='^.{40}$')], verbose_name='Secret access key'),
        ),
        migrations.AlterField(
            model_name='awsaccesskey',
            name='use_for_spotprice_history',
            field=models.BooleanField(default=False, verbose_name='Use this key for getting spot price history for other users'),
        ),
        migrations.AlterField(
            model_name='boscopool',
            name='status_page',
            field=models.CharField(blank=True, default='', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='condorjob',
            name='runs',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='The number of runs this particular job is performing'),
        ),
        migrations.AlterField(
            model_name='condorjob',
            name='status',
            field=models.CharField(choices=[('N', 'Not queued'), ('I', 'Idle'), ('R', 'Running'), ('H', 'Held'), ('F', 'Finished'), ('D', 'Mark for deletion'), ('U', 'Unknown'), ('E', 'Error')], max_length=1),
        ),
        migrations.AlterField(
            model_name='condorpool',
            name='address',
            field=models.CharField(blank=True, default='', max_length=200, verbose_name='The full username@remote_address of the remote submitter'),
        ),
        migrations.AlterField(
            model_name='condorpool',
            name='copy_of',
            field=models.ForeignKey(blank=True, help_text='Is this pool a copy of an existing pool belonging to another user?', null=True, on_delete=django.db.models.deletion.CASCADE, to='web_interface.CondorPool'),
        ),
        migrations.AlterField(
            model_name='condorpool',
            name='name',
            field=models.CharField(help_text='Choose a name for this pool', max_length=100, verbose_name='Pool name'),
        ),
        migrations.AlterField(
            model_name='condorpool',
            name='platform',
            field=models.CharField(choices=[('DEB6', 'Debian 6'), ('DEB7', 'Debian 7'), ('RH5', 'Red Hat 5'), ('RH6', 'Red Hat 6'), ('RH7', 'Red Hat 7'), ('UBUNTU12', 'Ubuntu 12'), ('MACOS', 'MAC OS')], default='DEB6', max_length=8, verbose_name='The platform of the remote condor submitter we are connecting to'),
        ),
        migrations.AlterField(
            model_name='condorpool',
            name='pool_type',
            field=models.CharField(choices=[('condor', 'Condor'), ('pbs', 'PBS'), ('lsf', 'LSF'), ('sge', 'Sun Grid Engine'), ('slurm', 'Slurm Workload Manager')], default='condor', max_length=20),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='instance_id',
            field=models.CharField(max_length=20, verbose_name='EC2 instance ID'),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='instance_role',
            field=models.CharField(choices=[('master', 'Master'), ('worker', 'Worker')], max_length=20),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='instance_status',
            field=models.CharField(default='initializing', max_length=20),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='instance_type',
            field=models.CharField(choices=[('t1.micro', 't1.micro (<2 ECU, 1 Core, 613MB (Free tier eligible))'), ('m1.small', 'm1.small (1 ECU, 1 Core, 1.7GB)'), ('m1.medium', 'm1.medium (2 ECUs, 1 Core, 3.7GB)'), ('m1.large', 'm1.large (4 ECUs, 2 Cores, 7.5GB)'), ('m1.xlarge', 'm1.xlarge (8 ECUs, 4 Cores, 15GB)'), ('m2.xlarge', 'm2.xlarge (6.5 ECUs, 2 Cores, 17.1GB)'), ('m2.2xlarge', 'm2.2xlarge (13 ECUs, 4 Cores, 34.2GB)'), ('m2.4xlarge', 'm2.4xlarge (26 ECUs, 8 Cores, 68.4GB)')], max_length=20),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='state',
            field=models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('shutting-down', 'Shutting down'), ('terminated', 'Terminated'), ('stopping', 'Stopping'), ('stopped', 'Stopped'), ('unknown', 'Unknown')], default='pending', max_length=20, verbose_name='Last known state'),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='state_transition_reason',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Why the instance changed state'),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='system_status',
            field=models.CharField(default='initializing', max_length=20),
        ),
        migrations.AlterField(
            model_name='ec2instance',
            name='termination_alarm',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='The name of any attached low CPU usage termination alarm'),
        ),
        migrations.AlterField(
            model_name='ec2keypair',
            name='name',
            field=models.CharField(max_length=100, verbose_name='EC2 Key Pair name'),
        ),
        migrations.AlterField(
            model_name='ec2keypair',
            name='path',
            field=models.CharField(max_length=255, verbose_name='Location of the public key pair'),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='auto_terminate',
            field=models.BooleanField(default=False, help_text='Terminate all nodes of the pool after a task has been run if no other tasks are running. Only applies after at least one task has been submitted to the pool.'),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='initial_instance_type',
            field=models.CharField(choices=[('t1.micro', 't1.micro (<2 ECU, 1 Core, 613MB (Free tier eligible))'), ('m1.small', 'm1.small (1 ECU, 1 Core, 1.7GB)'), ('m1.medium', 'm1.medium (2 ECUs, 1 Core, 3.7GB)'), ('m1.large', 'm1.large (4 ECUs, 2 Cores, 7.5GB)'), ('m1.xlarge', 'm1.xlarge (8 ECUs, 4 Cores, 15GB)'), ('m2.xlarge', 'm2.xlarge (6.5 ECUs, 2 Cores, 17.1GB)'), ('m2.2xlarge', 'm2.2xlarge (13 ECUs, 4 Cores, 34.2GB)'), ('m2.4xlarge', 'm2.4xlarge (26 ECUs, 8 Cores, 68.4GB)')], default='t1.micro', help_text='The instance type to launch. The price per hour will vary depending on the instance type. For more information on the different instance types see the <a href="">help page</a>.', max_length=20),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='size',
            field=models.PositiveIntegerField(help_text='The number of compute nodes to launch. In addition, a master node will also be launched.', verbose_name='Initial number of nodes'),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='smart_terminate',
            field=models.BooleanField(default=False, help_text='Terminate worker nodes if they have been idle for a period of time. Note that this applies whether a task is running or not.'),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='spot_price',
            field=models.DecimalField(blank=True, decimal_places=3, help_text='Bid price if launched with spot price bidding', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='spot_request',
            field=models.BooleanField(default=False, help_text='Was the pool launched with spot price bidding'),
        ),
        migrations.AlterField(
            model_name='ec2pool',
            name='vpc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web_interface.VPC', verbose_name='Keypair'),
        ),
        migrations.AlterField(
            model_name='elasticip',
            name='allocation_id',
            field=models.CharField(max_length=20, verbose_name='The allocation ID for the IP address'),
        ),
        migrations.AlterField(
            model_name='elasticip',
            name='association_id',
            field=models.CharField(max_length=20, verbose_name='The instance association ID for the address'),
        ),
        migrations.AlterField(
            model_name='spotrequest',
            name='instance_type',
            field=models.CharField(choices=[('t1.micro', 't1.micro (<2 ECU, 1 Core, 613MB (Free tier eligible))'), ('m1.small', 'm1.small (1 ECU, 1 Core, 1.7GB)'), ('m1.medium', 'm1.medium (2 ECUs, 1 Core, 3.7GB)'), ('m1.large', 'm1.large (4 ECUs, 2 Cores, 7.5GB)'), ('m1.xlarge', 'm1.xlarge (8 ECUs, 4 Cores, 15GB)'), ('m2.xlarge', 'm2.xlarge (6.5 ECUs, 2 Cores, 17.1GB)'), ('m2.2xlarge', 'm2.2xlarge (13 ECUs, 4 Cores, 34.2GB)'), ('m2.4xlarge', 'm2.4xlarge (26 ECUs, 8 Cores, 68.4GB)')], max_length=20),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='custom_fields',
            field=models.CharField(blank=True, default='', max_length=10000),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='finish_time',
            field=models.DateTimeField(blank=True, help_text='The time the subtask stopped running', null=True),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='index',
            field=models.PositiveIntegerField(verbose_name='The order in this subtask is to be executed'),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='job_count',
            field=models.IntegerField(default=-1, help_text='The count of the number of condor jobs. Only set after the subtask has finished. Use get_job_count() instead to find out job count'),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='local',
            field=models.BooleanField(blank=True, default=False, help_text='Is this subtask to be run locally?'),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='run_time',
            field=models.FloatField(default=-1.0, help_text='The cumulative run time of associated condor jobs in days. Only set after the subtask has finished. Use get_run_time() to access.'),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='start_time',
            field=models.DateTimeField(blank=True, help_text='The time this subtask started running', null=True),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='status',
            field=models.CharField(choices=[('waiting', 'Waiting'), ('ready', 'Ready'), ('running', 'Running'), ('finished', 'Finished'), ('error', 'Error'), ('delete', 'Marked for deletion'), ('unknown', 'Unknown')], default='waiting', max_length=32),
        ),
        migrations.AlterField(
            model_name='subtask',
            name='type',
            field=models.CharField(choices=[('lb', 'Load balancing'), ('main', 'Main task'), ('process', 'Results processing'), ('file', 'Creating file with optimal values'), ('other', 'Other')], max_length=32),
        ),
        migrations.AlterField(
            model_name='task',
            name='custom_fields',
            field=models.CharField(blank=True, default='', max_length=10000),
        ),
        migrations.AlterField(
            model_name='task',
            name='directory',
            field=models.CharField(blank=True, default='not_set', max_length=255),
        ),
        migrations.AlterField(
            model_name='task',
            name='job_count',
            field=models.IntegerField(default=-1, help_text='The count of the number of condor jobs. Only set after the subtask has finished. Use get_job_count() instead to find out job count'),
        ),
        migrations.AlterField(
            model_name='task',
            name='name',
            field=models.CharField(max_length=100, verbose_name='The name of the computing job'),
        ),
        migrations.AlterField(
            model_name='task',
            name='result_download',
            field=models.BooleanField(blank=True, default=True, verbose_name='Does this task type have a result download page?'),
        ),
        migrations.AlterField(
            model_name='task',
            name='result_view',
            field=models.BooleanField(blank=True, default=True, verbose_name='Does this task type have a result view page?'),
        ),
        migrations.AlterField(
            model_name='task',
            name='run_time',
            field=models.FloatField(default=-1.0, help_text='The run time of associated condor jobs. Only set after the subtask has finished. Use get_run_time() to access.'),
        ),
        migrations.AlterField(
            model_name='task',
            name='status',
            field=models.CharField(choices=[('new', 'New'), ('running', 'Running'), ('finished', 'Finished'), ('error', 'Error'), ('delete', 'Deleted'), ('cancelled', 'Cancelled'), ('unknown', 'Unknown')], default='waiting', max_length=32, verbose_name='The status of the task'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='internet_gateway_id',
            field=models.CharField(max_length=20, verbose_name='Internet gateway ID'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='master_group_id',
            field=models.CharField(max_length=20, verbose_name='Condor Master security group ID'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='route_table_association_id',
            field=models.CharField(max_length=20, verbose_name='Route table and subnet association ID'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='route_table_id',
            field=models.CharField(max_length=20, verbose_name='Route table ID'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='subnet_id',
            field=models.CharField(max_length=20, verbose_name='Subnet ID'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='vpc_id',
            field=models.CharField(max_length=20, verbose_name='VPC ID'),
        ),
        migrations.AlterField(
            model_name='vpc',
            name='worker_group_id',
            field=models.CharField(max_length=20, verbose_name='Condor Worker security group ID'),
        ),
    ]
